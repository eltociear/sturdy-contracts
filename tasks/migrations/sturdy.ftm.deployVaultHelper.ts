import { parseEther } from 'ethers/lib/utils';
import { task } from 'hardhat/config';
import { loadPoolConfig } from '../../helpers/configuration';
import {
  getATokensAndRatesHelper,
  getAuraRETHWETHVault,
  getDeployVaultHelper,
  getLendingPool,
  getLendingPoolAddressesProvider,
  getSturdyOracle,
  getVariableYieldDistribution,
  getYieldDistributorAdapter,
} from '../../helpers/contracts-getters';
import {
  getEthersSigners,
  getParamPerNetwork,
  insertContractAddressInDb,
} from '../../helpers/contracts-helpers';
import { impersonateAccountsHardhat, waitForTx } from '../../helpers/misc-utils';
import { eContractid, eNetwork } from '../../helpers/types';
import { deployBALRETHWETHOracle } from '../../helpers/contracts-deployments';

task('sturdy:ftm:deployVaultHelper', 'Deploy vault')
  .addParam('pool', `Pool name to retrieve configuration`)
  .addFlag('verify', 'Verify contracts at Etherscan')
  .setAction(async ({ pool, verify }, DRE) => {
    await DRE.run('set-DRE');

    const network = process.env.FORK || DRE.network.name;
    const poolConfig = loadPoolConfig(pool);
    const { ChainlinkAggregator } = poolConfig;

    const vaultHelper = await getDeployVaultHelper();
    const aTokenHelper = await getATokensAndRatesHelper();
    const addressProvider = await getLendingPoolAddressesProvider();
    const yieldDistributorAdapter = await getYieldDistributorAdapter();
    const _treasuryAddress = '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a';
    const _treasuryFee = 1000;
    const _aTokenHelper = aTokenHelper.address;

    const ethers = (DRE as any).ethers;
    const [_deployer] = await getEthersSigners();
    await _deployer.sendTransaction({
      value: parseEther('90000'),
      to: '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/,
    });
    await impersonateAccountsHardhat([
      '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/,
    ]);
    let signer = await ethers.provider.getSigner(
      '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/
    ); //Owner

    // // transfer owner to vaule helper contract for deploying new vault
    // await waitForTx(await addressProvider.connect(signer).transferOwnership(vaultHelper.address));

    await waitForTx(await aTokenHelper.connect(signer).transferOwnership(vaultHelper.address));

    // // auraRETH_WETH reserve
    // {
    //   // First deploy vault via addressProvider on the defender app
    //   const provider = await getLendingPoolAddressesProvider();
    //   await _deployer.sendTransaction({
    //     value: parseEther('90000'),
    //     to: '0xb4124ceb3451635dacedd11767f004d8a28c6ee7',
    //   });
    //   await impersonateAccountsHardhat(['0xb4124ceb3451635dacedd11767f004d8a28c6ee7']);
    //   signer = await ethers.provider.getSigner('0xb4124ceb3451635dacedd11767f004d8a28c6ee7'); //Owner
    //   await provider.connect(signer).setAddressAsProxy(
    //     '0x415552415f524554485f574554485f5641554c54000000000000000000000000', // 'id: AURA_RETH_WETH_VAULT'
    //     '0xC72cf04a986cCF83b2d57d82F96A639586010c2D' // vault implement address (AURA_RETH_WETH_VAULT)
    //   );

    //   // saving the newly created contract address
    //   const newVaultProxyAddress = await addressProvider.getAddress(
    //     '0x415552415f524554485f574554485f5641554c54000000000000000000000000' // 'id: AURA_RETH_WETH_VAULT'
    //   );
    //   await insertContractAddressInDb(eContractid.AuraRETHWETHVault, newVaultProxyAddress);

    //   // vault configuration
    //   const vault = await getAuraRETHWETHVault();
    //   signer = await ethers.provider.getSigner(
    //     '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/
    //   ); //poolAdmin
    //   await vault
    //     .connect(signer)
    //     .setConfiguration(/*BAL_RETH_WETH_LP*/ '0x1E19CF2D73a72Ef1332C882F20534B6519Be0276', 15); // set balancer lp token & aura pool id
    //   await vault.connect(signer).setIncentiveRatio('7500');

    //   const internalAsset = await vault.getInternalAsset();
    //   console.log('Internal Asset: ', internalAsset);

    //   // change the internal asset address in the configuration
    //   // index.ts

    //   // transfer owner to vaule helper contract for deploying new vault
    //   signer = await ethers.provider.getSigner('0xb4124ceb3451635dacedd11767f004d8a28c6ee7'); //Owner
    //   await waitForTx(await addressProvider.connect(signer).transferOwnership(vaultHelper.address));

    //   // Run deployVault using the above param
    //   // The following params are generated by running this command but only for forked mainnet, when deploy mainnet, need to change command including network
    //   // yarn hardhat external:get-param-for-new-vault --pool Sturdy --symbol auraBB_A3_USD --network main

    //   signer = await ethers.provider.getSigner(
    //     '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/
    //   ); //poolAdmin
    //   await waitForTx(
    //     await vaultHelper.connect(signer).deployVault(
    //       [
    //         '0x415552415f524554485f574554485f5641554c54000000000000000000000000', // 'AURA_RETH_WETH_VAULT'
    //         '0x4155524142414c5f524554485f57455448000000000000000000000000000000', // 'AURABAL_RETH_WETH'
    //         '0x42414c5f524554485f574554485f4c5000000000000000000000000000000000', // 'BAL_RETH_WETH_LP'
    //       ],
    //       [
    //         '0xC72cf04a986cCF83b2d57d82F96A639586010c2D', // vault implement address (AURA_RETH_WETH_VAULT)
    //         internalAsset, // internal asset address (AURABAL_RETH_WETH)
    //         '0x1E19CF2D73a72Ef1332C882F20534B6519Be0276', // exterenal asset address (BAL_RETH_WETH_LP)
    //       ],
    //       _treasuryAddress,
    //       _treasuryFee,
    //       _aTokenHelper,
    //       [
    //         {
    //           asset: internalAsset,
    //           baseLTV: '9000',
    //           liquidationThreshold: '9300',
    //           liquidationBonus: '10200',
    //           reserveFactor: '0',
    //           stableBorrowingEnabled: false,
    //           borrowingEnabled: false,
    //           collateralEnabled: true,
    //         },
    //       ],
    //       [
    //         {
    //           aTokenImpl: '0xeb05945568527aE1d314870eCeDF78290F44283a',
    //           stableDebtTokenImpl: '0xa2BE6439d8def6dD6523AeFd02a1356772d15569',
    //           variableDebtTokenImpl: '0x4eD6178D5dEf6AFD8e23334038609125cBB15C8F',
    //           underlyingAssetDecimals: '18',
    //           interestRateStrategyAddress: '0x939FC67C23f3d2b165BD7C5cb15Ce8EEe3Fa4429',
    //           yieldAddress: '0x0000000000000000000000000000000000000000',
    //           underlyingAsset: internalAsset,
    //           treasury: '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a',
    //           incentivesController: '0xA897716BA0c7603B10b8b2854c104912a6058542',
    //           underlyingAssetName: 'auraRETH_WETH',
    //           aTokenName: 'Sturdy interest bearing auraRETH_WETH',
    //           aTokenSymbol: 'sauraRETH_WETH',
    //           variableDebtTokenName: 'Sturdy variable debt bearing auraRETH_WETH',
    //           variableDebtTokenSymbol: 'variableDebtauraRETH_WETH',
    //           stableDebtTokenName: 'Sturdy stable debt bearing auraRETH_WETH',
    //           stableDebtTokenSymbol: 'stableDebtauraRETH_WETH',
    //           params: '0x10',
    //         },
    //       ]
    //     )
    //   );

    //   // Deploy BALRETHWETH oracle
    //   let BALRETHWETHOracleAddress = getParamPerNetwork(ChainlinkAggregator, <eNetwork>network).auraRETH_WETH;
    //   if (!BALRETHWETHOracleAddress) {
    //     const BALRETHWETHOracle = await deployBALRETHWETHOracle(verify);
    //     BALRETHWETHOracleAddress = BALRETHWETHOracle.address;
    //   }

    //   // Register
    //   const sturdyOracle = await getSturdyOracle();
    //   await waitForTx(
    //     await sturdyOracle.setAssetSources(
    //       [internalAsset, '0x1E19CF2D73a72Ef1332C882F20534B6519Be0276'],
    //       [BALRETHWETHOracleAddress, BALRETHWETHOracleAddress],
    //       [true, false]
    //     )
    //   );

    //   // update the oracle configuration
    //   // common.ts

    //   //BAL VariableYieldDistributor config
    //   const lendingPool = await getLendingPool();
    //   const response = await lendingPool.getReserveData(internalAsset);
    //   const VariableYieldDistributor = await getVariableYieldDistribution();
    //   await VariableYieldDistributor.connect(signer).registerAsset(
    //     response.aTokenAddress,
    //     newVaultProxyAddress
    //   );

    //   await yieldDistributorAdapter.setVariableYieldDistributor(
    //     internalAsset,
    //     VariableYieldDistributor.address
    //   );
    // }

    console.log(await addressProvider.owner());
    console.log(await aTokenHelper.owner());
  });
