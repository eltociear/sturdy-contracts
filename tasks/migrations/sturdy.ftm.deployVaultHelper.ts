import { parseEther } from 'ethers/lib/utils';
import { task } from 'hardhat/config';
import { loadPoolConfig } from '../../helpers/configuration';
import {
  getATokensAndRatesHelper,
  getDeployVaultHelper,
  getLendingPoolAddressesProvider,
} from '../../helpers/contracts-getters';
import { getEthersSigners } from '../../helpers/contracts-helpers';
import { impersonateAccountsHardhat, waitForTx } from '../../helpers/misc-utils';

task('sturdy:ftm:deployVaultHelper', 'Deploy vault')
  .addParam('pool', `Pool name to retrieve configuration`)
  .addFlag('verify', 'Verify contracts at Etherscan')
  .setAction(async ({ pool, verify }, DRE) => {
    await DRE.run('set-DRE');

    const network = process.env.FORK || DRE.network.name;
    const poolConfig = loadPoolConfig(pool);
    const { ReserveAssets, ChainlinkAggregator } = poolConfig;

    const vaultHelper = await getDeployVaultHelper();
    const aTokenHelper = await getATokensAndRatesHelper();
    const addressProvider = await getLendingPoolAddressesProvider();
    const _treasuryAddress = '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a';
    const _treasuryFee = 1000;
    const _aTokenHelper = aTokenHelper.address;

    const ethers = (DRE as any).ethers;
    const [_deployer] = await getEthersSigners();
    await _deployer.sendTransaction({
      value: parseEther('90000'),
      to: '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/,
    });
    await impersonateAccountsHardhat([
      '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/,
    ]);
    let signer = await ethers.provider.getSigner(
      '0xb4124ceb3451635dacedd11767f004d8a28c6ee7' /*'0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'*/
    ); //Owner

    // // transfer owner to vaule helper contract for deploying new vault
    // await waitForTx(await addressProvider.connect(signer).transferOwnership(vaultHelper.address));

    await waitForTx(await aTokenHelper.connect(signer).transferOwnership(vaultHelper.address));

    // // cvxTUSD_FRAXBP reserve
    // {
    //   // First deploy vault via addressProvider on the defender app
    //   const provider = await getLendingPoolAddressesProvider();
    //   await _deployer.sendTransaction({
    //     value: parseEther('90000'),
    //     to: '0x4e489d9863c9bAAc6C4917E1221274760BA889F5',
    //   });
    //   await impersonateAccountsHardhat(['0x4e489d9863c9bAAc6C4917E1221274760BA889F5']);
    //   signer = await ethers.provider.getSigner('0x4e489d9863c9bAAc6C4917E1221274760BA889F5'); //Owner
    //   await provider.connect(signer).setAddressAsProxy(
    //     '0x434f4e5645585f545553445f4652415842505f5641554c540000000000000000', // 'id: CONVEX_TUSD_FRAXBP_VAULT'
    //     '0xda87577f9eb8B15B26C00619FD06d4485880310D' // vault implement address (CONVEX_TUSD_FRAXBP_VAULT)
    //   );

    //   // saving the newly created contract address
    //   const newVaultProxyAddress = await addressProvider.getAddress(
    //     '0x434f4e5645585f545553445f4652415842505f5641554c540000000000000000' // 'id: CONVEX_TUSD_FRAXBP_VAULT'
    //   );
    //   await insertContractAddressInDb(eContractid.ConvexTUSDFRAXBPVault, newVaultProxyAddress);

    //   // vault configuration
    //   const vault = await getConvexTUSDFRAXBPVault();
    //   signer = await ethers.provider.getSigner('0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'); //poolAdmin
    //   await vault
    //     .connect(signer)
    //     .setConfiguration(/*TUSD_FRAXBP_LP*/ '0x33baeDa08b8afACc4d3d07cf31d49FC1F1f3E893', 108); // set curve lp token & convex pool id
    //   await vault.connect(signer).setIncentiveRatio('7500');

    //   const internalAsset = await vault.getInternalAsset();
    //   console.log('Internal Asset: ', internalAsset);

    //   // change the internal asset address in the configuration
    //   // index.ts

    //   // transfer owner to vaule helper contract for deploying new vault
    //   signer = await ethers.provider.getSigner('0x4e489d9863c9bAAc6C4917E1221274760BA889F5'); //Owner
    //   await waitForTx(await addressProvider.connect(signer).transferOwnership(vaultHelper.address));

    //   // Run deployVault using the above param
    //   // The following params are generated by running this command but only for forked mainnet, when deploy mainnet, need to change command including network
    //   // yarn hardhat external:get-param-for-new-vault --pool Sturdy --symbol cvxIRON_BANK --network main

    //   signer = await ethers.provider.getSigner('0xfE6DE700427cc0f964aa6cE15dF2bB56C7eFDD60'); //poolAdmin
    //   await waitForTx(
    //     await vaultHelper.connect(signer).deployVault(
    //       [
    //         '0x434f4e5645585f545553445f4652415842505f5641554c540000000000000000', // 'CONVEX_TUSD_FRAXBP_VAULT'
    //         '0x435658545553445f465241584250000000000000000000000000000000000000', // 'CVXTUSD_FRAXBP'
    //         '0x545553445f4652415842505f4c50000000000000000000000000000000000000', // 'TUSD_FRAXBP_LP'
    //       ],
    //       [
    //         '0xda87577f9eb8B15B26C00619FD06d4485880310D', // vault implement address (CONVEX_TUSD_FRAXBP_VAULT)
    //         internalAsset, // internal asset address (CVXTUSD_FRAXBP)
    //         '0x33baeDa08b8afACc4d3d07cf31d49FC1F1f3E893', // exterenal asset address (TUSD_FRAXBP_LP)
    //       ],
    //       _treasuryAddress,
    //       _treasuryFee,
    //       _aTokenHelper,
    //       [
    //         {
    //           asset: internalAsset,
    //           baseLTV: '9000',
    //           liquidationThreshold: '9300',
    //           liquidationBonus: '10200',
    //           reserveFactor: '0',
    //           stableBorrowingEnabled: false,
    //           borrowingEnabled: false,
    //           collateralEnabled: true,
    //         },
    //       ],
    //       [
    //         {
    //           aTokenImpl: '0xc0b3799d31875cbAe5450528663A3D205d62Ac0F',
    //           stableDebtTokenImpl: '0x98A60C175fF02fC099383c6F6504a82aD8B85248',
    //           variableDebtTokenImpl: '0x6AdCd1C2a36eFbA34801384cc4A18f754A4de20E',
    //           underlyingAssetDecimals: '18',
    //           interestRateStrategyAddress: '0x3a5e7db2E0EA9e69fB53Cd8582e64D4001746E8c',
    //           yieldAddress: '0x0000000000000000000000000000000000000000',
    //           underlyingAsset: internalAsset,
    //           treasury: '0xFd1D36995d76c0F75bbe4637C84C06E4A68bBB3a',
    //           incentivesController: '0xA3e9B5e1dc6B24F296FfCF9c085E2546A466b883',
    //           underlyingAssetName: 'cvxTUSD_FRAXBP',
    //           aTokenName: 'Sturdy interest bearing cvxTUSD_FRAXBP',
    //           aTokenSymbol: 'scvxTUSD_FRAXBP',
    //           variableDebtTokenName: 'Sturdy variable debt bearing cvxTUSD_FRAXBP',
    //           variableDebtTokenSymbol: 'variableDebtcvxTUSD_FRAXBP',
    //           stableDebtTokenName: 'Sturdy stable debt bearing cvxTUSD_FRAXBP',
    //           stableDebtTokenSymbol: 'stableDebtcvxTUSD_FRAXBP',
    //           params: '0x10',
    //         },
    //       ]
    //     )
    //   );

    //   // Deploy TUSDFRAXBP oracle
    //   let TUSDFRAXBPOracleAddress = getParamPerNetwork(
    //     ChainlinkAggregator,
    //     <eNetwork>network
    //   ).cvxTUSD_FRAXBP;
    //   if (!TUSDFRAXBPOracleAddress) {
    //     const TUSDFRAXBPOracle = await deployTUSDFRAXBPCOracle(verify);
    //     TUSDFRAXBPOracleAddress = TUSDFRAXBPOracle.address;
    //   }
    //   const sturdyOracle = await getSturdyOracle();
    //   await impersonateAccountsHardhat(['0x48Cc0719E3bF9561D861CB98E863fdA0CEB07Dbc']);
    //   signer = await ethers.provider.getSigner('0x48Cc0719E3bF9561D861CB98E863fdA0CEB07Dbc'); //Owner
    //   await waitForTx(
    //     await sturdyOracle.connect(signer).setAssetSources([
    //       internalAsset,
    //       '0x33baeDa08b8afACc4d3d07cf31d49FC1F1f3E893',
    //       '0x0000000000085d4780B73119b644AE5ecd22b376'
    //     ], [
    //       TUSDFRAXBPOracleAddress,
    //       TUSDFRAXBPOracleAddress,
    //       getParamPerNetwork(ChainlinkAggregator, <eNetwork>network).TUSD
    //     ])
    //   );

    //   // update the oracle configuration
    //   // common.ts

    //   //CRV VariableYieldDistributor config
    //   const lendingPool = await getLendingPool();
    //   const response = await lendingPool.getReserveData(internalAsset);
    //   const VariableYieldDistributor = await getVariableYieldDistribution();
    //   await VariableYieldDistributor.connect(signer).registerAsset(
    //     response.aTokenAddress,
    //     newVaultProxyAddress
    //   );
    //   const reserveConfigs = getReserveConfigs(pool);
    //   const strategyParams = reserveConfigs['strategyCVXTUSD_FRAXBP'];
    //   const incentivesController = await getSturdyIncentivesController();
    //   await incentivesController.connect(signer).configureAssets(
    //     [response.aTokenAddress, response.variableDebtTokenAddress],
    //     [strategyParams.emissionPerSecond, strategyParams.emissionPerSecond]
    //   );
    // }

    console.log(await addressProvider.owner());
    console.log(await aTokenHelper.owner());
  });
